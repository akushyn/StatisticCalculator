#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.8.0b3 on Mon Feb 12 11:30:47 2018
#

import wx

# begin wxGlade: dependencies
import gettext
# end wxGlade

import wx.html
from src.views.akHistoryDataManagerView import AkHistoricalDataManagerView
from src.views.akAboutView import AkAboutView
from src.views.akHelpView import AkHelpView
from src.views.akInstrumentManagerView import AkInstrumentManagerView

class AkStatisticCalculatorFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((900, 600))
        
        self.InitMenuBar()
        self.__set_properties()
        self.__do_layout()

     
    def InitMenuBar(self):
        #--------------------------------------------------------------------------
        # Menu 'File'
        #------------------------       
        menuBar = wx.MenuBar()
        
        fileMenu = wx.Menu()
        connectMenuItem = wx.MenuItem(fileMenu, wx.ID_ANY, "Connect...")
        connectMenuItem.SetBitmap(wx.Bitmap('images/menu/connect.bmp'))
        fileMenu.Append(connectMenuItem) 
        self.Bind(wx.EVT_MENU, self.onConnectHandler, id=connectMenuItem.GetId())
        
        disconnectMenuItem = wx.MenuItem(fileMenu, wx.ID_ANY, "Disconnect...")
        disconnectMenuItem.SetBitmap(wx.Bitmap('images/menu/disconnect.bmp'))
        fileMenu.Append(disconnectMenuItem)
        self.Bind(wx.EVT_MENU, self.onDisconnectHandler, id=disconnectMenuItem.GetId())
        
        fileMenu.AppendSeparator()
        exitMenuItem = wx.MenuItem(fileMenu, wx.ID_ANY, '&Quit\tCtrl+Q')
        exitMenuItem.SetBitmap(wx.Bitmap('images/menu/exit.bmp'))
        fileMenu.Append(exitMenuItem)
        self.Bind(wx.EVT_MENU, self.onExitHandler, id=exitMenuItem.GetId())
        
        menuBar.Append(fileMenu, "&File")

        #--------------------------------------------------------------------------
        # Menu 'Tools'
        #------------------------
        toolsMenu = wx.Menu()
        
        itstrumentMngrMenuItem = wx.MenuItem(toolsMenu, wx.ID_ANY, "Instrument Manager...\tCtrl+I")
        itstrumentMngrMenuItem.SetBitmap(wx.Bitmap('images/menu/instruments.bmp'))
        toolsMenu.Append(itstrumentMngrMenuItem)
        self.Bind(wx.EVT_MENU, self.onInstrumentHandler, id=itstrumentMngrMenuItem.GetId())
        
        historyDataMngrMenuItem = wx.MenuItem(toolsMenu, wx.ID_ANY, "Historical Data Manager...\tCtrl+H")
        historyDataMngrMenuItem.SetBitmap(wx.Bitmap('images/menu/history.bmp'))
        toolsMenu.Append(historyDataMngrMenuItem)
        self.Bind(wx.EVT_MENU, self.onHistoryDataManagerHandler, id=historyDataMngrMenuItem.GetId())
        
        toolsMenu.AppendSeparator()
        
        connectionMngrMenuItem = wx.MenuItem(toolsMenu, wx.ID_ANY, "Connection Manager...")
        connectionMngrMenuItem.SetBitmap(wx.Bitmap('images/menu/connections.bmp'))
        toolsMenu.Append(connectionMngrMenuItem)
        self.Bind(wx.EVT_MENU, self.onConnectionManagerHandler, id=connectionMngrMenuItem.GetId())
        
        optionsMenuItem = wx.MenuItem(toolsMenu, wx.ID_ANY, "Options...\tCtrl+O")
        optionsMenuItem.SetBitmap(wx.Bitmap('images/menu/options.bmp'))
        toolsMenu.Append(optionsMenuItem)
        self.Bind(wx.EVT_MENU, self.onOptionsHandler, id=optionsMenuItem.GetId())
        
        menuBar.Append(toolsMenu, "&Tools")

        #--------------------------------------------------------------------------
        # Menu 'Help'
        #------------------------
        
        helpMenu = wx.Menu()
        
        helpMenuItem = wx.MenuItem(helpMenu, wx.ID_ANY, "Help...\tF1")
        helpMenuItem.SetBitmap(wx.Bitmap('images/menu/help.bmp'))
        helpMenu.Append(helpMenuItem)
        self.Bind(wx.EVT_MENU, self.onHelpHandler, id=helpMenuItem.GetId())
        
        aboutMenuItem = wx.MenuItem(helpMenu, wx.ID_ANY, "About...")
        aboutMenuItem.SetBitmap(wx.Bitmap('images/menu/about.bmp'))
        helpMenu.Append(aboutMenuItem)
        self.Bind(wx.EVT_MENU, self.onAboutHandler, id=aboutMenuItem.GetId())
        
        menuBar.Append(helpMenu, "&Help")
        self.SetMenuBar(menuBar)
        

    
    def __set_properties(self):
        self.SetTitle(_("Statistic Calculator"))

    def __do_layout(self):
        vBox = wx.BoxSizer(wx.VERTICAL)
        vBox.Add((0, 0), 0, 0, 0)
        
        self.SetSizer(vBox)
        self.Layout()

    def onInstrumentHandler(self, event):  # wxGlade: AkStatisticCalculator.<event_handler>
        print("Event handler 'onInstrumentHandler' not implemented!")
        with AkInstrumentManagerView(self) as instrumentMngr:
            instrumentMngr.ShowModal()

    def onConnectionManagerHandler(self, event):  # wxGlade: AkStatisticCalculator.<event_handler>
        print("Event handler 'onConnectionManagerHandler' not implemented!")
        event.Skip()

    def onHistoryDataManagerHandler(self, event):  # wxGlade: AkStatisticCalculator.<event_handler>
        print("Event handler 'onHistoryDataManagerHandler' called!")
        #dial = wx.MessageDialog(None, 'Unallowed operation', 'Exclamation', wx.OK | wx.ICON_EXCLAMATION)
        #dial.ShowModal()
        #event.Skip()
        with AkHistoricalDataManagerView(self) as historyDataMngr:
            historyDataMngr.ShowModal()

    def onOptionsHandler(self, event):  # wxGlade: AkStatisticCalculator.<event_handler>
        print("Event handler 'onOptionsHandler' not implemented!")
        event.Skip()

    def onHelpHandler(self, event):  # wxGlade: AkStatisticCalculator.<event_handler>
        print("Event handler 'onHelpHandler' called!")
        with AkHelpView(self) as dlg:
            dlg.ShowModal()
        
        
    def onAboutHandler(self, event):  
        print("Event handler 'onAboutHandler' called!")
        with AkAboutView(self) as dlg:
            dlg.ShowModal()
    
    def onConnectHandler(self, event):
        print("Event handler 'onConnectHandler' not implemented!")
        event.Skip()
        
    def onDisconnectHandler(self, event):
        print("Event handler 'onDisconnectHandler' not implemented!")
        event.Skip()

    def onExitHandler(self, event):
        print("Event handler 'onExitHandler' not implemented!")
        self.Close()
        event.Skip()


class MyApp(wx.App):
    def OnInit(self):
        self.frame = AkStatisticCalculatorFrame(None, wx.ID_ANY, "")
        self.SetTopWindow(self.frame)
        self.frame.Show()
        return True

# end of class MyApp

if __name__ == "__main__":
    gettext.install("app") # replace with the appropriate catalog name

    app = MyApp(0)
    app.MainLoop()
